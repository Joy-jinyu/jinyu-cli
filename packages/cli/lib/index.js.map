{"version":3,"file":"index.js","sources":["../src/hello.ts","../src/mock/server.ts","../src/mock/index.ts","../src/index.ts"],"sourcesContent":["import { Command } from 'commander'\nimport chalk from 'chalk'\n\nconst { log } = console\n\nconst helloAction = async (\n  str: string,\n  options: {\n    name: string\n  }\n) => {\n  if (options.name) {\n    log(`hello ${chalk.bold.red(str)}, it's happy to meet you!`)\n  }\n}\n\nexport const registerHello = (program: Command) => {\n  program\n    .command('hello')\n    .description('hello commander')\n    .argument('<string>', 'console name')\n    .option('-n, --name', 'show you name')\n    .option('-s, --separator <char>', 'separator character', ',')\n    .action(helloAction)\n}\n","// @ts-check\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport express, { Express } from 'express'\nimport { ViteDevServer } from 'vite'\nimport { getMockData } from '@ovometajs/utils'\n\ninterface MockData {\n  apiPath: string;\n  jsonStr: string;\n}\n\nexport async function createServer(\n  root = process.cwd(),\n): Promise<{\n  app: Express\n  vite: ViteDevServer | undefined\n}> {\n  const __dirname = path.dirname(fileURLToPath(import.meta.url))\n  const resolve = (p: string) => path.resolve(__dirname, p)\n\n  const app = express()\n\n  /**\n   * @type {import('vite').ViteDevServer}\n   */\n  const vite: ViteDevServer = await (\n    await import('vite')\n  ).createServer({\n    base: '/mock/',\n    root,\n    logLevel: 'info',\n    server: {\n      middlewareMode: true,\n      watch: {\n        // During tests we edit the files too fast and sometimes chokidar\n        // misses change events, so enforce polling for consistency\n        usePolling: true,\n        interval: 100\n      },\n      hmr: {\n        // port: hmrPort\n      }\n    },\n    appType: 'custom'\n  })\n  // use vite's connect instance as middleware\n  app.use(vite.middlewares)\n\n  app.use('*', async (req, res, next) => {\n    try {\n      const url = req.originalUrl\n\n\n      if (url && /^\\/api/.test(url || '')) {\n        next()\n        return\n      }\n\n      let template\n      // always read fresh template in dev\n      template = fs.readFileSync(resolve('dist/client/index.html'), 'utf-8')\n      template = await vite.transformIndexHtml(url, template)\n      const render = (await vite.ssrLoadModule('/src/entry-server.js')).render\n      const manifest = JSON.parse(\n        fs.readFileSync(resolve('dist/client/ssr-manifest.json'), 'utf-8')\n      )\n\n      const [appHtml, preloadLinks] = await render(url, manifest)\n\n      const html = template\n        .replace(`<!--preload-links-->`, preloadLinks)\n        .replace(`<!--app-html-->`, appHtml)\n\n      res.status(200).set({ 'Content-Type': 'text/html' }).end(html)\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        vite && vite.ssrFixStacktrace(e)\n        console.log(e.stack)\n        res.status(500).end(e.stack)\n      }\n    }\n  })\n\n  const mockData = getMockData('mock')\n\n  mockData.forEach((data: MockData) => {\n    app.use(`/api${data.apiPath}`, (req, res) => {\n      res.status(200).json(data.jsonStr)\n    })\n  })\n  return { app, vite }\n}\n","import { Command } from 'commander'\nimport { createServer } from './server'\nimport chalk from 'chalk'\n\nexport const registerMock = (program: Command) => {\n  const mockAction = async () => {\n    const opts = program.opts()\n    const port = opts.port || 6173\n    createServer().then(({ app }) =>\n      app.listen(port, () => {\n        console.log(\n          chalk.green.underline(`http://localhost:${port}`)\n        )\n      })\n    )\n  }\n\n  program.option('-p, --port <port>', 'mock port');\n\n  program\n    .command('mock')\n    .description('start a mock manage')\n    .action(mockAction)\n}\n","import { Command } from 'commander'\n\nimport { registerHello } from './hello'\nimport { registerMock } from './mock'\n\nconst program = new Command()\n\nprogram.name('ovo-cli').description('ovo cli tools').version('0.0.4')\nregisterHello(program)\nregisterMock(program)\nprogram.parse(process.argv)\n\n"],"names":["log","console","helloAction","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","str","options","wrap","_context","prev","next","name","concat","chalk","bold","red","stop","_x","_x2","apply","this","arguments","createServer","_createServer","_callee2","root","__dirname","resolve","app","vite","_args2","_context2","length","undefined","process","cwd","path","dirname","fileURLToPath","import","p","express","Promise","then","_interopNamespace","require","sent","base","logLevel","server","middlewareMode","watch","usePolling","interval","hmr","appType","use","middlewares","req","res","url","template","render","manifest","_yield$render2","appHtml","html","originalUrl","test","abrupt","fs","readFileSync","transformIndexHtml","ssrLoadModule","JSON","parse","_slicedToArray","replace","status","set","end","t0","Error","ssrFixStacktrace","stack","_x3","getMockData","forEach","data","apiPath","json","jsonStr","program","Command","description","version","command","argument","option","action","registerHello","mockAction","opts","port","_ref2","listen","green","underline","registerMock","argv"],"mappings":"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"}