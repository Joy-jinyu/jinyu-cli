{"version":3,"file":"index.js","sources":["../src/hello.ts","../src/mock/server.ts","../src/mock/index.ts","../src/index.ts"],"sourcesContent":["import { Command } from 'commander'\nimport chalk from 'chalk'\n\nconst { log } = console\n\nconst helloAction = async (\n  str: string\n) => {\n  log(`hello ${chalk.bold.red(str)}, it's happy to meet you!`)\n}\n\nexport const registerHello = (program: Command) => {\n  program\n    .command('hello')\n    .description('hello commander')\n    .argument('<string>', 'console name')\n    .action(helloAction)\n}\n","import express, { Express } from 'express'\nimport { ViteDevServer } from 'vite'\nimport { getMockData } from '@ovometajs/utils'\nimport { createProxyMiddleware } from 'http-proxy-middleware'\n\ninterface MockData {\n  apiPath: string;\n  jsonStr: string;\n}\n\nexport async function createServer(\n  {\n    apiTarget = 'https://www.zhihu.com/api',\n    staticTarget = 'https://www.zhihu.com/static',\n    root = process.cwd(),\n  } = {}\n): Promise<{\n  app: Express\n  vite: ViteDevServer | undefined\n}> {\n  const app = express()\n\n  // 配置代理中间件\n  const apiProxy = createProxyMiddleware({\n    target: apiTarget, // 目标服务器地址\n    changeOrigin: true, // 改变请求源头，对于跨域请求很有用\n    // pathRewrite: { '^/api': '' }, // 重写请求路径，去掉 '/api' 前缀\n  });\n\n    // 如果需要代理静态资源，比如图片、CSS等，也可以类似配置\n  const staticProxy = createProxyMiddleware({\n    target: staticTarget, // 静态资源服务器地址\n    changeOrigin: true,\n  });\n\n  /**\n   * @type {import('vite').ViteDevServer}\n   */\n  const vite: ViteDevServer = await (\n    await import('vite')\n  ).createServer({\n    base: '/mock/',\n    root,\n    logLevel: 'info',\n    server: {\n      middlewareMode: true,\n      watch: {\n        // During tests we edit the files too fast and sometimes chokidar\n        // misses change events, so enforce polling for consistency\n        usePolling: true,\n        interval: 100\n      },\n      hmr: {\n        // port: hmrPort\n      }\n    },\n    appType: 'custom'\n  })\n  // use vite's connect instance as middleware\n  app.use(vite.middlewares)\n\n  app.use('*', async (req, res, next) => {\n    try {\n      const url = req.originalUrl\n\n\n      if (url && /^\\/api/.test(url || '')) {\n        next()\n        return\n      }\n      res.status(200).set({ 'Content-Type': 'text/html' }).end('Hello World!')\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        vite && vite.ssrFixStacktrace(e)\n        res.status(500).end(e.stack)\n      }\n    }\n  })\n\n  const mockData = getMockData('mock')\n\n  mockData.forEach((data: MockData) => {\n    app.use(`/api${data.apiPath}`, (req, res) => {\n      res.status(200).send(\n        JSON.parse(data.jsonStr)\n      )\n    })\n  })\n  // 使用中间件\n  app.use('/api', apiProxy);\n  app.use('/static', staticProxy);\n\n\n  return { app, vite }\n}\n","import { Command } from 'commander'\nimport { createServer } from './server'\nimport chalk from 'chalk'\n\nexport const registerMock = (program: Command) => {\n  const mockAction = async (apiTarget: string, staticTarget: string) => {\n    const opts = program.opts()\n    const port = opts.port || 6173\n    createServer({\n      apiTarget,\n      staticTarget\n    }).then(({ app }) =>\n      app.listen(port, () => {\n        console.log(\n          chalk.green.underline(`http://localhost:${port}`)\n        )\n      })\n    )\n  }\n\n  program.option('-p, --port <port>', 'mock port');\n\n  program\n    .command('mock')\n    .description('start a mock manage')\n    .arguments(\"[apiTarget] [staticTarget]\")\n    .action(mockAction)\n}\n","import { Command } from 'commander'\n\nimport { registerHello } from './hello'\nimport { registerMock } from './mock'\n\nconst program = new Command()\n\nprogram.name('ovo-cli').description('ovo cli tools').version('0.0.4')\nregisterHello(program)\nregisterMock(program)\nprogram.parse(process.argv)\n\n"],"names":["log","console","helloAction","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","str","wrap","_context","prev","next","concat","chalk","bold","red","stop","_x","apply","this","arguments","createServer","_createServer","_callee2","_ref$apiTarget","apiTarget","_ref$staticTarget","staticTarget","_ref$root","root","app","apiProxy","staticProxy","vite","_args2","_context2","length","undefined","process","cwd","express","createProxyMiddleware","target","changeOrigin","import","sent","base","logLevel","server","middlewareMode","watch","usePolling","interval","hmr","appType","use","middlewares","_ref2","req","res","url","originalUrl","test","abrupt","status","set","end","t0","Error","ssrFixStacktrace","stack","_x2","_x3","getMockData","forEach","data","apiPath","send","JSON","parse","jsonStr","program","Command","name","description","version","command","argument","action","registerHello","mockAction","opts","port","then","listen","green","underline","option","registerMock","argv"],"mappings":"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"}