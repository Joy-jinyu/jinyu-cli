{"version":3,"file":"index.js","sources":["../src/hello.ts","../src/mock/server.ts","../src/mock/index.ts","../src/index.ts"],"sourcesContent":["import { Command } from 'commander'\nimport chalk from 'chalk'\n\nconst { log } = console\n\nconst helloAction = async (\n  str: string\n) => {\n  log(`hello ${chalk.bold.red(str)}, it's happy to meet you!`)\n}\n\nexport const registerHello = (program: Command) => {\n  program\n    .command('hello')\n    .description('hello commander')\n    .argument('<string>', 'console name')\n    .action(helloAction)\n}\n","// @ts-check\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport express, { Express } from 'express'\nimport { ViteDevServer } from 'vite'\nimport { getMockData } from '@ovometajs/utils'\nimport { createProxyMiddleware } from 'http-proxy-middleware'\n\ninterface MockData {\n  apiPath: string;\n  jsonStr: string;\n}\n\nexport async function createServer(\n  {\n    apiTarget = '',\n    staticTarget = '',\n    root = process.cwd(),\n  } = {}\n): Promise<{\n  app: Express\n  vite: ViteDevServer | undefined\n}> {\n  const __dirname = path.dirname(fileURLToPath(import.meta.url))\n  const resolve = (p: string) => path.resolve(__dirname, p)\n\n  const app = express()\n\n  // 配置代理中间件\n  const apiProxy = createProxyMiddleware({\n    target: apiTarget, // 目标服务器地址\n    changeOrigin: true, // 改变请求源头，对于跨域请求很有用\n    // pathRewrite: { '^/api': '' }, // 重写请求路径，去掉 '/api' 前缀\n  });\n\n    // 如果需要代理静态资源，比如图片、CSS等，也可以类似配置\n  const staticProxy = createProxyMiddleware({\n    target: staticTarget, // 静态资源服务器地址\n    changeOrigin: true,\n  });\n\n  /**\n   * @type {import('vite').ViteDevServer}\n   */\n  const vite: ViteDevServer = await (\n    await import('vite')\n  ).createServer({\n    base: '/mock/',\n    root,\n    logLevel: 'info',\n    server: {\n      middlewareMode: true,\n      watch: {\n        // During tests we edit the files too fast and sometimes chokidar\n        // misses change events, so enforce polling for consistency\n        usePolling: true,\n        interval: 100\n      },\n      hmr: {\n        // port: hmrPort\n      }\n    },\n    appType: 'custom'\n  })\n  // use vite's connect instance as middleware\n  app.use(vite.middlewares)\n\n  app.use('*', async (req, res, next) => {\n    try {\n      const url = req.originalUrl\n\n\n      if (url && /^\\/api/.test(url || '')) {\n        next()\n        return\n      }\n\n      let template\n      // always read fresh template in dev\n      template = fs.readFileSync(resolve('dist/client/index.html'), 'utf-8')\n      template = await vite.transformIndexHtml(url, template)\n      const render = (await vite.ssrLoadModule('/src/entry-server.js')).render\n      const manifest = JSON.parse(\n        fs.readFileSync(resolve('dist/client/ssr-manifest.json'), 'utf-8')\n      )\n\n      const [appHtml, preloadLinks] = await render(url, manifest)\n\n      const html = template\n        .replace(`<!--preload-links-->`, preloadLinks)\n        .replace(`<!--app-html-->`, appHtml)\n\n      res.status(200).set({ 'Content-Type': 'text/html' }).end(html)\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        vite && vite.ssrFixStacktrace(e)\n        console.log(req.originalUrl)\n        // res.status(500).end(e.stack)\n        res.status(200).set({ 'Content-Type': 'text/html' }).end('')\n      }\n    }\n  })\n\n  const mockData = getMockData('mock')\n\n  mockData.forEach((data: MockData) => {\n    app.use(`/api${data.apiPath}`, (req, res) => {\n      res.status(200).send(\n        JSON.parse(data.jsonStr)\n      )\n    })\n  })\n  // 使用中间件\n  app.use('/api', apiProxy);\n  app.use('/static', staticProxy);\n\n\n  return { app, vite }\n}\n","import { Command } from 'commander'\nimport { createServer } from './server'\nimport chalk from 'chalk'\n\nexport const registerMock = (program: Command) => {\n  const mockAction = async (apiTarget: string, staticTarget: string) => {\n    const opts = program.opts()\n    const port = opts.port || 6173\n    createServer({\n      apiTarget,\n      staticTarget\n    }).then(({ app }) =>\n      app.listen(port, () => {\n        console.log(\n          chalk.green.underline(`http://localhost:${port}`)\n        )\n      })\n    )\n  }\n\n  program.option('-p, --port <port>', 'mock port');\n\n  program\n    .command('mock')\n    .description('start a mock manage')\n    .arguments(\"<apiTarget> <staticTarget>\")\n    .action(mockAction)\n}\n","import { Command } from 'commander'\n\nimport { registerHello } from './hello'\nimport { registerMock } from './mock'\n\nconst program = new Command()\n\nprogram.name('ovo-cli').description('ovo cli tools').version('0.0.4')\nregisterHello(program)\nregisterMock(program)\nprogram.parse(process.argv)\n\n"],"names":["log","console","helloAction","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","str","wrap","_context","prev","next","concat","chalk","bold","red","stop","_x","apply","this","arguments","createServer","_createServer","_callee2","_ref$apiTarget","apiTarget","_ref$staticTarget","staticTarget","_ref$root","root","__dirname","resolve","app","apiProxy","staticProxy","vite","_args2","_context2","length","undefined","process","cwd","path","dirname","fileURLToPath","import","p","express","createProxyMiddleware","target","changeOrigin","Promise","then","_interopNamespace","require","sent","base","logLevel","server","middlewareMode","watch","usePolling","interval","hmr","appType","use","middlewares","_ref2","req","res","url","template","render","manifest","_yield$render2","appHtml","html","originalUrl","test","abrupt","fs","readFileSync","transformIndexHtml","ssrLoadModule","JSON","parse","_slicedToArray","replace","status","set","end","t0","Error","ssrFixStacktrace","_x2","_x3","getMockData","forEach","data","apiPath","send","jsonStr","program","Command","name","description","version","command","argument","action","registerHello","mockAction","opts","port","listen","green","underline","option","registerMock","argv"],"mappings":"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"}