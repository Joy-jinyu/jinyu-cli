{"version":3,"file":"dom-to-image.esm.js","sources":["../src/utils/index.ts","../src/cloneClone.ts","../src/utils/svg.ts","../src/utils/inliner.ts","../src/utils/font.ts","../src/utils/image.ts","../src/index.ts"],"sourcesContent":["/*\n  * Only WOFF and EOT mime types for fonts are 'real'\n  * see http://www.iana.org/assignments/media-types/media-types.xhtml\n  */\nconst WOFF = 'application/font-woff'\nconst JPEG = 'image/jpeg'\n\nconst mimes: Record<string, string> = {\n  'woff': WOFF,\n  'woff2': WOFF,\n  'ttf': 'application/font-truetype',\n  'eot': 'application/vnd.ms-fontobject',\n  'png': 'image/png',\n  'jpg': JPEG,\n  'jpeg': JPEG,\n  'gif': 'image/gif',\n  'tiff': 'image/tiff',\n  'svg': 'image/svg+xml'\n}\n\n/** 请求资源的类型 */\nexport const parseExtension = (url: string) => {\n    const match = /\\.([^\\.\\/]*?)$/g.exec(url)\n    if (match) return match[1]\n    else return ''\n}\n\n/** 请求资源的请求头 */\nexport const mimeType = (url: string) => {\n    const extension = parseExtension(url).toLowerCase()\n    return mimes[extension] || ''\n}\n\n/** 请求资源包含 data: */\nexport const isDataUrl = (url: string) => {\n    return url.search(/^(data:)/) !== -1\n}\n\nexport const toBlob = (canvas: HTMLCanvasElement) => {\n    return new Promise((resolve) => {\n        const binaryString = window.atob(canvas.toDataURL().split(',')[1])\n        const length = binaryString.length\n        const binaryArray = new Uint8Array(length)\n\n      for (let i = 0; i < length; i++)\n            binaryArray[i] = binaryString.charCodeAt(i)\n\n        resolve(new Blob([binaryArray], {\n            type: 'image/png'\n        }))\n    })\n}\n\nexport const canvasToBlob = (canvas: HTMLCanvasElement) => {\n    if (canvas.toBlob)\n        return new Promise((resolve) => {\n            canvas.toBlob(resolve)\n        })\n\n    return toBlob(canvas)\n}\n\nexport const resolveUrl = (url: string, baseUrl: string) => {\n    let doc = document.implementation.createHTMLDocument()\n    let base = doc.createElement('base')\n    doc.head.appendChild(base)\n    let a = doc.createElement('a')\n    doc.body.appendChild(a)\n    base.href = baseUrl\n    a.href = url\n    return a.href\n}\n\nexport const uid = (() => {\n    let index = 0\n\n    return () => {\n        const fourRandomChars = () => {\n            /* see http://stackoverflow.com/a/6248722/2519373 */\n            return ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4)\n        }\n\n        return 'u' + fourRandomChars() + index++\n    }\n})()\n\nexport const makeImage = async (uri: string | undefined): Promise<HTMLImageElement | undefined> => {\n  if (!uri) return\n\n  return await new Promise((resolve, reject) => {\n      let image = new Image()\n      image.onload = () => {\n          resolve(image)\n      }\n      image.onerror = () => {\n        reject(`图片加载失败: ${uri}`)\n      }\n      image.src = uri\n  })\n}\n\nexport const getAndEncode = (url: string, {\n  cacheBust = false,\n  imagePlaceholder = undefined\n}: {\n  cacheBust?: boolean\n  imagePlaceholder?: string\n} = {}): Promise<string> => {\n    let TIMEOUT = 30000\n    if (cacheBust) {\n        // Cache bypass so we dont have CORS issues with cached images\n        // Source: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n        url += ((/\\?/).test(url) ? \"&\" : \"?\") + (new Date()).getTime()\n    }\n\n    return new Promise((resolve) => {\n        let request = new XMLHttpRequest()\n        const done = () => {\n            if (request.readyState !== 4) return\n\n            if (request.status !== 200) {\n                if(placeholder) {\n                    resolve(placeholder)\n                } else {\n                    fail('cannot fetch resource: ' + url + ', status: ' + request.status)\n                }\n\n                return\n            }\n\n            let encoder = new FileReader()\n            encoder.onloadend = () => {\n                const result: string = encoder?.result as string || ''\n                let content = result.split(/,/)[1]\n                resolve(content)\n            }\n            encoder.readAsDataURL(request.response)\n        }\n\n        const timeout = () => {\n            if(placeholder) {\n                resolve(placeholder)\n            } else {\n                fail('timeout of ' + TIMEOUT + 'ms occured while fetching resource: ' + url)\n            }\n        }\n\n        const fail = (message: string) => {\n            console.error(message)\n            resolve('')\n        }\n\n        request.onreadystatechange = done\n        request.ontimeout = timeout\n        request.responseType = 'blob'\n        request.timeout = TIMEOUT\n        request.open('GET', url, true)\n        request.send()\n\n        let placeholder: string\n        if(imagePlaceholder) {\n            let split = imagePlaceholder.split(/,/)\n            if(split && split[1]) {\n                placeholder = split[1]\n            }\n        }\n    })\n}\n\nexport const dataAsUrl = (content: string, type: string) => {\n    return 'data:' + type + ';base64,' + content\n}\n\nexport const escape = (string: string) => {\n    return string.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1')\n}\n\nexport const delay = (ms: number) => {\n    return (arg: any) => {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve(arg)\n            }, ms)\n        })\n    }\n}\n\n\nexport const asArray = <T extends NodeList | CSSStyleDeclaration | StyleSheetList | CSSRuleList, U>(arrayLike: T): U[] => {\n    let array = []\n    let length = arrayLike.length\n    for (let i = 0; i < length; i++) array.push(arrayLike[i])\n    return array as U[]\n}\n\nexport const escapeXhtml = (string: string) => {\n    return string.replace(/#/g, '%23').replace(/\\n/g, '%0A')\n}\n\nexport const nodeWidth = (node: HTMLElement) => {\n    let leftBorder = px(node, 'border-left-width')\n    let rightBorder = px(node, 'border-right-width')\n    return node.scrollWidth + leftBorder + rightBorder\n}\n\nexport const nodeHeight = (node: HTMLElement) => {\n    let topBorder = px(node, 'border-top-width')\n    let bottomBorder = px(node, 'border-bottom-width')\n    return node.scrollHeight + topBorder + bottomBorder\n}\n\nexport const px = (node: HTMLElement, styleProperty: string) => {\n    let value = window.getComputedStyle(node).getPropertyValue(styleProperty)\n    return parseFloat(value.replace('px', ''))\n}\n","import { asArray, makeImage, uid } from \"./utils\";\n\nexport const cloneNode = async (node: HTMLElement, filter: Function, root?: Boolean) => {\n  if (!root && filter && !filter(node)) return;\n\n\n  const cloneChildren = async (original: HTMLElement, clone: HTMLElement, filter: Function) => {\n    let children = original.childNodes;\n    if (children.length === 0) return Promise.resolve(clone);\n\n    const cloneChildrenInOrder = async (parent: HTMLElement, children: ChildNode[], filter: Function) => {\n      for await (let child of children) {\n        const childClone = await cloneNode(child as HTMLElement, filter);\n        if (childClone) parent.appendChild(childClone);\n      }\n    }\n\n    await cloneChildrenInOrder(clone, asArray<NodeListOf<ChildNode>, ChildNode>(children), filter)\n    return clone\n  }\n\n  const makeNodeCopy = (node: HTMLElement) => {\n    if (node instanceof HTMLCanvasElement) return makeImage(node.toDataURL());\n    return node.cloneNode(false) as HTMLElement;\n  }\n\n  const processClone = async (original: HTMLElement, clone: HTMLElement) => {\n    if (!(clone instanceof Element)) return clone;\n\n    return await Promise.resolve()\n        .then(cloneStyle)\n        .then(clonePseudoElements)\n        .then(copyUserInput)\n        .then(fixSvg)\n        .then(function () {\n            return clone;\n        });\n\n    function cloneStyle() {\n        const copyStyle = (source: CSSStyleDeclaration, target: CSSStyleDeclaration) => {\n            const copyProperties = () => {\n                asArray<CSSStyleDeclaration, string>(source).forEach(function (name) {\n                    target.setProperty(\n                        name,\n                        source.getPropertyValue(name),\n                        source.getPropertyPriority(name)\n                    );\n                });\n            }\n            if (source.cssText) target.cssText = source.cssText;\n            else copyProperties();\n        }\n        copyStyle(window.getComputedStyle(original), clone.style);\n    }\n\n    function clonePseudoElements() {\n        [':before', ':after'].forEach(function (element) {\n            clonePseudoElement(element);\n        });\n\n        function clonePseudoElement(element: string) {\n            let style = window.getComputedStyle(original, element);\n            let content = style.getPropertyValue('content');\n\n            if (content === '' || content === 'none') return;\n\n            let className = uid();\n            clone.className = clone.className + ' ' + className;\n            let styleElement = document.createElement('style');\n            styleElement.appendChild(formatPseudoElementStyle(className, element, style));\n            clone.appendChild(styleElement);\n\n            function formatPseudoElementStyle(className: string, element: string, style: CSSStyleDeclaration) {\n                let selector = '.' + className + ':' + element;\n                let cssText = style.cssText ? formatCssText(style) : formatCssProperties(style);\n                return document.createTextNode(selector + '{' + cssText + '}');\n\n                function formatCssText(style: CSSStyleDeclaration) {\n                    let content = style.getPropertyValue('content');\n                    return style.cssText + ' content: ' + content + ';';\n                }\n\n                function formatCssProperties(style: CSSStyleDeclaration) {\n                    return asArray<CSSStyleDeclaration, string>(style)\n                        .map(formatProperty)\n                        .join('; ') + ';';\n\n                    function formatProperty(name: string) {\n                        return name + ': ' +\n                            style.getPropertyValue(name) +\n                            (style.getPropertyPriority(name) ? ' !important' : '');\n                    }\n                }\n            }\n        }\n    }\n\n    function copyUserInput() {\n        if (original instanceof HTMLTextAreaElement) clone.innerHTML = original.value;\n        if (original instanceof HTMLInputElement) clone.setAttribute(\"value\", original.value);\n    }\n\n    function fixSvg() {\n        if (!(clone instanceof SVGElement)) return;\n        clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n\n        if (!(clone instanceof SVGRectElement)) return;\n        ['width', 'height'].forEach(function (attribute) {\n            let value = clone.getAttribute(attribute);\n            if (!value) return;\n\n            clone.style.setProperty(attribute, value);\n        });\n    }\n  }\n\n  return await Promise.resolve(node)\n      .then(makeNodeCopy)\n      .then(async (clone) => {\n        if (!clone) return\n          return await cloneChildren(node, clone, filter);\n      })\n      .then(async (clone) => {\n        if (!clone) return\n          return await processClone(node, clone);\n      });\n}\n","import { escapeXhtml } from \".\";\n\nexport const domToSvg = async (node: HTMLElement, width: number, height: number) =>{\n  return await Promise.resolve(node)\n      .then(function (node) {\n          node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n          return new XMLSerializer().serializeToString(node);\n      })\n      .then(escapeXhtml)\n      .then(function (xhtml) {\n          return '<foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">' + xhtml + '</foreignObject>';\n      })\n      .then(function (foreignObject) {\n          return '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + width + '\" height=\"' + height + '\">' +\n              foreignObject + '</svg>';\n      })\n      .then(function (svg) {\n          return 'data:image/svg+xml;charset=utf-8,' + svg;\n      });\n}\n","import { dataAsUrl, escape, getAndEncode, isDataUrl, mimeType, resolveUrl } from \".\";\n\nexport class Inliner {\n  private static URL_REGEX = /url\\(['\"]?([^'\"]+?)['\"]?\\)/g;\n\n  public static shouldProcess(url: string) {\n      return url.search(this.URL_REGEX) !== -1;\n  }\n\n  public static readUrls(url: string) {\n      var result = [];\n      var match;\n      while ((match = this.URL_REGEX.exec(url)) !== null) {\n          result.push(match[1]);\n      }\n      return result.filter(function (url) {\n          return !isDataUrl(url);\n      });\n  }\n\n  public static inlineAll(link: string, baseUrl = '') {\n    if (!this.shouldProcess(link)) return Promise.resolve(link);\n\n    return Promise.resolve(link)\n        .then(this.readUrls)\n        .then((urls) => {\n            var done = Promise.resolve(link);\n            urls.forEach((url) => {\n                done = done.then((_link) => {\n                    return this.inline(_link, url, baseUrl);\n                });\n            });\n            return done;\n        });\n  }\n\n  public static inline(link: string, url: string, baseUrl: string) {\n    const urlAsRegex = (_url: string) => {\n      return new RegExp('(url\\\\([\\'\"]?)(' + escape(_url) + ')([\\'\"]?\\\\))', 'g');\n    }\n      return Promise.resolve(url)\n          .then(function (url) {\n              return baseUrl ? resolveUrl(url, baseUrl) : url;\n          })\n          .then(getAndEncode)\n          .then((data) => {\n              return dataAsUrl(data, mimeType(url));\n          })\n          .then((dataUrl) => {\n              return link.replace(urlAsRegex(url), '$1' + dataUrl + '$3');\n          });\n  }\n}\n","import { asArray } from \".\";\nimport { Inliner } from \"./inliner\";\n\nexport class FontFaces {\n  constructor() {\n  }\n\n  public resolveAll() {\n    document.querySelector\n    return this.readAll(document)\n        .then((webFonts) => {\n            return Promise.all(\n                webFonts.map(function (webFont) {\n                    return webFont.resolve();\n                })\n            );\n        })\n        .then(function (cssStrings) {\n            return cssStrings.join('\\n');\n        });\n  }\n\n  private readAll(dom: Document) {\n    return Promise.resolve(asArray<StyleSheetList, CSSStyleSheet>(dom.styleSheets))\n        .then(this.getCssRules)\n        .then(this.selectWebFontRules)\n        .then((rules) => {\n            return rules.map(this.newWebFont);\n        });\n  }\n\n  private getCssRules(styleSheets: CSSStyleSheet[]) {\n      const cssRules: CSSRule[] = [];\n      styleSheets.forEach((sheet) => {\n          try {\n            asArray<CSSRuleList, CSSRule>(sheet.cssRules)\n              .forEach((rule: CSSRule) => {\n              cssRules.push(rule);\n            })\n          } catch (e: any) {\n              console.log('Error while reading CSS rules from ' + sheet.href, e.toString());\n          }\n      });\n      return cssRules;\n  }\n\n\n\n  private selectWebFontRules(cssRules: Array<CSSRule | CSSFontFaceRule>) {\n    return cssRules\n        .filter((rule) => {\n            return rule.type === CSSRule.FONT_FACE_RULE;\n        })\n        .filter((rule) => {\n          if (rule instanceof CSSFontFaceRule) {\n            return Inliner.shouldProcess(rule.style.getPropertyValue('src'));\n          }\n          return false\n        }) as CSSFontFaceRule[];\n  }\n\n  private newWebFont(webFontRule: CSSFontFaceRule) {\n      return {\n          resolve: function resolve() {\n              const baseUrl = (webFontRule.parentStyleSheet || {}).href || '';\n              return Inliner.inlineAll(webFontRule.cssText, baseUrl);\n          },\n          src: function () {\n              return webFontRule.style.getPropertyValue('src');\n          }\n      };\n  }\n}\n\nexport const embedFonts = (node: HTMLElement | undefined) => {\n  if (!node) return\n\n  const fontFaces = new FontFaces()\n  return fontFaces.resolveAll()\n    .then(function (cssText) {\n        const styleNode = document.createElement('style');\n        node.appendChild(styleNode);\n        styleNode.appendChild(document.createTextNode(cssText));\n        return node;\n    });\n}\n","import { asArray, dataAsUrl, getAndEncode, isDataUrl, mimeType } from \".\";\nimport { Inliner } from \"./inliner\";\n\nexport class Images {\n\n  constructor() {\n\n  }\n\n  public async inlineAll(node: HTMLElement | ChildNode): Promise<any> {\n    if (!(node instanceof Element)) return Promise.resolve(node);\n\n    return await this.inlineBackground(node as HTMLElement)\n        .then(() => {\n            if (node instanceof HTMLImageElement)\n                return this.newImage(node) || undefined;\n            else\n                return Promise.all(\n                    asArray<NodeListOf<ChildNode>, ChildNode>(node.childNodes).map((child: ChildNode) =>{\n                        return this.inlineAll(child);\n                    })\n                );\n        });\n  }\n\n  private async newImage(element: HTMLImageElement): Promise<any> {\n    if (isDataUrl(element.src)) return Promise.resolve();\n\n    return await Promise.resolve(element.src)\n        .then(getAndEncode)\n        .then(function (data) {\n            return dataAsUrl(data, mimeType(element.src));\n        })\n        .then(function (dataUrl) {\n            return new Promise(function (resolve, reject) {\n                element.onload = resolve;\n                element.onerror = () => {\n                  reject(`图片加载失败 newImage：${dataUrl}`)\n                };\n                element.src = dataUrl;\n            });\n        });\n  }\n\n  private async inlineBackground(node: HTMLElement): Promise<HTMLElement> {\n    const background = node.style.getPropertyValue('background');\n\n    if (!background) return Promise.resolve(node);\n\n    return await Inliner.inlineAll(background)\n        .then((inlined) => {\n            node.style.setProperty(\n                'background',\n                inlined,\n                node.style.getPropertyPriority('background')\n            );\n          return node\n        })\n  }\n}\n\nexport const inlineImages = async (node: HTMLElement | undefined) => {\n  if (!node) return\n\n  const images = new Images()\n  return await images.inlineAll(node)\n      .then(function () {\n          return node;\n      });\n}\n","import { cloneNode } from \"./cloneClone\";\nimport { domToSvg } from \"./utils/svg\";\nimport { embedFonts } from \"./utils/font\";\nimport { inlineImages } from \"./utils/image\";\nimport { delay, makeImage, nodeHeight, nodeWidth} from \"./utils\";\n\nexport class DomToImage {\n  private options: any\n  constructor(options: any = {}) {\n    this.options = options || {}\n  }\n\n  public async toPng(node: HTMLElement, options: any = {}) {\n    this.options = {...this.options, ...options }\n\n    return await this.draw(node)\n        .then(function (canvas) {\n            return canvas.toDataURL();\n        });\n  }\n\n  private draw(domNode: HTMLElement, options: any = {}) {\n    this.options = {...this.options, ...options }\n    return this.toSvg(domNode)\n      .then(makeImage)\n      .then(delay(100))\n      .then((image: any) => {\n        let canvas = this.newCanvas(domNode);\n        canvas.getContext('2d')?.drawImage(image, 0, 0);\n        return canvas;\n      });\n  }\n\n  public async toSvg(node: HTMLElement,options: any = {}) {\n    this.options = {...this.options, ...options }\n\n    const { filter, loadFont, bgcolor, width, height, style } = this.options\n\n    const applyOptions = (clone: HTMLElement | undefined) => {\n      if (!clone) return\n      if (bgcolor) clone.style.backgroundColor = bgcolor;\n      if (width) clone.style.width = width + 'px';\n      if (height) clone.style.height = height + 'px';\n\n      if (style)\n          Object.keys(style).forEach((property: any) => {\n              clone.style[property] = style[property];\n          });\n\n      return clone;\n    }\n    return await Promise.resolve(node)\n        .then((node: HTMLElement) => {\n            return cloneNode(node, filter, true);\n        })\n        .then((clone) => {\n          if (loadFont) return embedFonts(clone);\n          return clone;\n        })\n        .then(inlineImages)\n        .then(applyOptions)\n        .then((clone) => {\n          if (!clone) return\n            return domToSvg(clone,\n                width || nodeWidth(node),\n                height || nodeHeight(node)\n            )\n        })\n  }\n\n  private newCanvas(domNode: HTMLElement): HTMLCanvasElement {\n    const { width, height, bgcolor } = this.options\n    let canvas = document.createElement('canvas');\n    canvas.width = width || nodeWidth(domNode);\n    canvas.height = height || nodeHeight(domNode);\n\n    if (bgcolor) {\n      const ctx = canvas.getContext('2d') as CanvasRenderingContext2D\n      ctx.fillStyle = bgcolor;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n    return canvas;\n  }\n}\n"],"names":["index","WOFF","JPEG","mimes","woff","woff2","ttf","eot","png","jpg","jpeg","gif","tiff","svg","mimeType","url","extension","match","exec","parseExtension","toLowerCase","isDataUrl","search","uid","Math","random","pow","toString","slice","makeImage","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","uri","wrap","_context","prev","next","abrupt","Promise","resolve","reject","image","Image","onload","onerror","concat","src","sent","stop","_x","apply","this","arguments","getAndEncode","_ref2","length","undefined","_ref2$cacheBust","cacheBust","_ref2$imagePlaceholde","imagePlaceholder","test","Date","getTime","placeholder","request","XMLHttpRequest","fail","message","console","error","onreadystatechange","readyState","status","encoder","FileReader","onloadend","content","result","split","readAsDataURL","response","ontimeout","responseType","timeout","open","send","dataAsUrl","type","asArray","arrayLike","array","i","push","escapeXhtml","string","replace","nodeWidth","node","leftBorder","px","rightBorder","scrollWidth","nodeHeight","topBorder","bottomBorder","scrollHeight","styleProperty","value","window","getComputedStyle","getPropertyValue","parseFloat","cloneNode","_callee6","filter","root","cloneChildren","makeNodeCopy","processClone","_context6","_callee2","original","clone","children","cloneChildrenInOrder","_context2","childNodes","_ref3","parent","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","child","childClone","_asyncIterator","done","appendChild","t0","finish","_x7","_x8","_x9","_x4","_x5","_x6","HTMLCanvasElement","toDataURL","_ref4","_callee3","cloneStyle","clonePseudoElements","copyUserInput","fixSvg","_context3","SVGElement","setAttribute","SVGRectElement","forEach","attribute","getAttribute","style","setProperty","HTMLTextAreaElement","innerHTML","HTMLInputElement","element","className","styleElement","document","createElement","formatPseudoElementStyle","selector","cssText","formatCssText","formatCssProperties","createTextNode","map","formatProperty","join","name","getPropertyPriority","clonePseudoElement","source","target","Element","then","_x10","_x11","_ref5","_callee4","_context4","_x12","_ref6","_callee5","_context5","_x13","_x2","_x3","domToSvg","width","height","XMLSerializer","serializeToString","xhtml","foreignObject","Inliner","_createClass","_classCallCheck","key","URL_REGEX","link","_this","baseUrl","shouldProcess","readUrls","urls","_link","inline","doc","implementation","createHTMLDocument","base","head","a","body","href","resolveUrl","data","dataUrl","RegExp","_defineProperty","FontFaces","readAll","webFonts","all","webFont","cssStrings","dom","styleSheets","getCssRules","selectWebFontRules","rules","newWebFont","cssRules","sheet","rule","e","log","CSSRule","FONT_FACE_RULE","CSSFontFaceRule","webFontRule","inlineAll","parentStyleSheet","embedFonts","resolveAll","styleNode","Images","_inlineAll","inlineBackground","HTMLImageElement","newImage","_newImage","_inlineBackground","background","inlined","inlineImages","images","DomToImage","options","_toPng","_args","_objectSpread","draw","canvas","domNode","ms","toSvg","arg","setTimeout","_canvas$getContext","newCanvas","getContext","drawImage","_toSvg","_this$options","loadFont","bgcolor","applyOptions","_args2","backgroundColor","Object","keys","property","_this$options2","ctx","fillStyle","fillRect"],"mappings":"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"}